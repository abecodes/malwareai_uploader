import { Dispatch, SetStateAction } from "react";

import db from "../../layers/db";
import api from "../../layers/api";
import _getInfoFromHead from "../../utils/_getInfoFromHead";

let nextReset: number;
let isQuerying = false;

export default (
	apiKey: string,
	setRequests: Dispatch<SetStateAction<number>>,
	setReset: Dispatch<SetStateAction<number>>
) => {
	if (isQuerying) return;
	isQuerying = true;

	(!nextReset
		? db.getUser().then((user) => {
				nextReset = user.limitReset;
		  })
		: Promise.resolve()
	)
		.then(() => _reset(apiKey, setRequests, setReset))
		.catch(console.error)
		.finally(() => (isQuerying = false));
};

const _reset = (
	apiKey: string,
	setRequests: Dispatch<SetStateAction<number>>,
	setReset: Dispatch<SetStateAction<number>>
): Promise<void | [any, void]> =>
	(Date.now() > nextReset
		? api.getStats(apiKey).then(_getInfoFromHead)
		: Promise.resolve({ requests: 0, reset: 0 })
	).then(({ requests, reset }) => {
		return Promise.all([
			requests
				? db.updateRemainingRequests(requests).then(() => setRequests(requests))
				: Promise.resolve(),
			reset
				? db.updateLimitReset(reset).then(() => {
						nextReset = reset;
						setReset(reset);
				  })
				: Promise.resolve(),
		]);
	});
