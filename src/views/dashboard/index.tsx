import * as React from "react";
import { useState, useContext } from "react";

import Dragndrop from "../../components/dragndrop";
import FileList from "../../components/list/file";
import Carousel from "../../components/carousel";
import Card from "../../components/card";

import "./dashboard.css";

import { ApiConnector } from "../../services/apiConnector";
import { StoreContext } from "../../store";
import notify from "../../layers/notifications";

const apiConnector = ApiConnector.getInstance();

export default () => {
	const [uploading, setUploading] = useState(false);
	const {
		modalContent: [_, setModalContext],
	} = useContext(StoreContext);

	return (
		<div id="dashboard">
			<div>
				<Carousel shape="bar">
					<Card
						img={require("../../../assets/img/inlyse_icon_BrowserSecurity.png")}
						title="BROWSER SECURITY"
						className="card-green"
					>
						<h3>General Description</h3>
						<p>
							The inlyse Browser Security extension provides more security while
							browsing the Internet. It instantly scans inline documents,
							downloaded documents and links to documents against viruses and
							blocks them if malicious content is found.
						</p>
						<p>
							Avoid infections and other unwanted outcomes when you open
							suspicious documents or links to documents by checking it against
							inlyse Malware Protection. inlyse Malware Protection is a
							combination of intelligent image recognition mechanisms and
							self-learning neural networks to detect malware.
						</p>
						<h3>Features</h3>
						<ul>
							<li>Protects against links to malicious documents</li>
							<li>Protects against opening malicious inline documents</li>
							<li>Blocks downloading of malicious documents</li>
							<li>Scans documents before viewing them</li>
							<li>Scans documents before downloading them</li>
							<li>
								Scans files up to 16MB in size, before downloading them from the
								internet
							</li>
							<li>Provides possibility to skip scans</li>
							<li>
								Provides possibility to manually block/unblock downloads und
								inline documents
							</li>
						</ul>
					</Card>
					<Card
						img={require("../../../assets/img/inlyse_icon_MailSecurity.png")}
						title="MAIL SECURITY"
						className="card-orange"
					>
						<h3>General Description</h3>
						<p>
							Over 95% of all cyber attacks begin with an email to an unexpected
							victim. (Reference: SANS) Sometimes it seems easy to blame users
							for falling victim to phishing attacks, but campaigns are becoming
							increasingly sophisticated. It's often difficult to distinguish a
							malicious email from a regular one because attackers will tailor
							attacks to look as if they come from a trusted source, such as
							cloud service providers like Microsoft or Google, colleagues, or
							even the boss. Scanning incoming emails against known and unknown
							malicious content is essentially required to protect your company
							from becoming compromised. At this critical endpoint it is very
							meaningful to not rely on a single instance of security but to
							integrate several layers of security software.
						</p>
						<h4>No need to replace an existing solution</h4>
						<p>
							The inlyse Plugins are designed to integrate seamless into any
							kind of email infrastructure and work complementary to any other
							security solution.
						</p>
						<h4>Scan Emails where it makes sense for your business</h4>
						<p>
							We scan incoming emails exactly where you want to scan them no
							matter if its onside the Client Endpoint via our Outlook Plugins,
							onside the email Server (MS Exchange, Office365) or E-Mail
							Gateways like SMTP Proxies.
						</p>
						<h4>Define actions</h4>
						<p>
							No matter where you integrate our plugins, we provide a central
							administration dashboard where you can manage and monitor your
							Plugin endpoints or define global actions and rules which fits
							your specific needs
						</p>
					</Card>
					<Card
						img={require("../../../assets/img/inlyse_icon_ApplicationSecurity.png")}
						title="APPLICATION SECURITY"
						className="card-red"
					>
						<h3>General Description</h3>
						<p>
							Modern technology is crucial to organisations, but at the same
							time, it also brings with IT security concerns. To add to this,
							the concept of a 'workplace' is no longer restricted to a cubicle,
							with employees working remotely occupying a significant part of
							the workforce. On the one hand, these factors are boosting
							productivity, but on the other, the question is how to ensure data
							security.
						</p>
						<p>
							With our Plugins you can strike a balance between productivity and
							security. Our modular system architecture allows us to rapidly
							develop plugins for new tools to support you further boosting the
							productivity of your company.
						</p>
						<p>
							Try Out some of our plugins or standalone client: Slack, OneDrive,
							Local Scanner.
						</p>
						<p>
							Missing Any Plugins? Send us a notification in the Q&amp;A
							Section.
						</p>
					</Card>
					<Card
						img={require("../../../assets/img/inlyse_icon_API.png")}
						title="MALWARE PROTECTION API"
						className="card-blue"
					>
						<h3>Scan Anywhere</h3>
						<p>
							Our cloud-based API makes it really easy to scan for viruses and
							malware in your application. Whether you're running Cloud or
							On-Premise we can handle as many requests as you can push.
						</p>
						<h3>Works with any Language / Framework</h3>
						<p>
							Our JSON API works with regular HTTPS POST requests. Whatever your
							preference we can take URLs or direct file uploads and scan them.
							In addition, we offer ready-made SDKs for many programming
							languages, which can be used to access our API very easily.
						</p>
						<h3>Build to be secure</h3>
						<p>
							We've built our attachment scanning appliances to be secure by
							default. We use HTTPS encryption for transfer, AES encryption for
							files at rest and take security very seriously.
						</p>
						<ul>
							<li>
								<span>Supported SDKs:</span> C/C++, GO, Python, JavaScript, PHP
							</li>
							<li>
								<span>File Size Limits:</span> 16 MB
							</li>
							<li>
								<span>Documentation :</span> Link
							</li>
						</ul>
					</Card>
				</Carousel>
			</div>
			<div>
				<StoreContext.Consumer>
					{({
						apiKey: [apiKey],
						bandwidth: [bandwidth, setBandwidth],
						files: [files, setFiles],
						requests: [requests, setRequests],
					}) => (
						<Dragndrop
							loading={uploading}
							apiKey={apiKey}
							handleNoApiKey={() => {
								const evt = document.createEvent("MouseEvents");
								evt.initMouseEvent(
									"click",
									true,
									true,
									window,
									1,
									0,
									0,
									0,
									0,
									false,
									false,
									false,
									false,
									0,
									null
								);
								document
									.querySelector(".rs-navbar-right .rs-nav-item-content")
									?.dispatchEvent(evt);
								setModalContext({
									title: "No API key",
									content: <p>Please enter an API key an try again</p>,
								});
							}}
							handleFiles={(files) => {
								setUploading(true);
								apiConnector.upload(
									files,
									apiKey,
									setFiles,
									setRequests,
									() => {
										setUploading(false);

										notify({
											title: "Done",
											message: `${files.length} file(s) uploaded`,
											type: "success",
										});
									},
									bandwidth
								);
							}}
						/>
					)}
				</StoreContext.Consumer>
				<StoreContext.Consumer>
					{({ files: [files] }) => {
						const latest = files.filter((file) => file.result > 59).slice(-5);
						return latest.length ? (
							<FileList
								data={latest}
								emptyIcon="smile-o"
								emptyMsg="No malicious files found so far"
							/>
						) : null;
					}}
				</StoreContext.Consumer>
			</div>
		</div>
	);
};
