import * as React from "react";
import { ReactNode } from "react";
import {
	useState,
	useEffect,
	createContext,
	Dispatch,
	SetStateAction,
} from "react";
import db from "../layers/db";

interface IModalContent {
	title?: string;
	content: ReactNode;
}

interface IContext {
	files: [IFile[], Dispatch<SetStateAction<IFile[]>>];
	bandwidth: [number, Dispatch<SetStateAction<number>>];
	requests: [number, Dispatch<SetStateAction<number>>];
	reset: [number, Dispatch<SetStateAction<number>>];
	apiKey: [string, Dispatch<SetStateAction<string>>];
	modalContent: [IModalContent, Dispatch<SetStateAction<IModalContent>>];
}

export const StoreContext = createContext({} as IContext);

export default ({ children }) => {
	const [bandwidth, setBandwidth] = useState(0);
	const [apiKey, setApiKey] = useState("");
	const [requests, setRequests] = useState(0);
	const [reset, setReset] = useState(0);
	const [files, setFiles] = useState<IFile[]>([]);
	const [modalContent, setModalContent] = useState<IModalContent>({
		content: null,
	});

	useEffect(() => {
		db.getUser().then((u) => {
			if (u) {
				setApiKey(u.key);
				setRequests(u.remainingRequests);
				setReset(u.limitReset);
				setBandwidth(u.bandwidth);
			}
		}, console.error);
		db.getFiles().then((f) => setFiles(f), console.error);
	}, []);

	const store = {
		files: [files, setFiles] as [IFile[], Dispatch<SetStateAction<IFile[]>>],
		bandwidth: [bandwidth, setBandwidth] as [
			number,
			Dispatch<SetStateAction<number>>
		],
		requests: [requests, setRequests] as [
			number,
			Dispatch<SetStateAction<number>>
		],
		reset: [reset, setReset] as [number, Dispatch<SetStateAction<number>>],
		apiKey: [apiKey, setApiKey] as [string, Dispatch<SetStateAction<string>>],
		modalContent: [modalContent, setModalContent] as [
			IModalContent,
			Dispatch<SetStateAction<IModalContent>>
		],
	};

	return (
		<StoreContext.Provider value={store}>{children}</StoreContext.Provider>
	);
};
