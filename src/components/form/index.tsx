import * as React from "react";
import {
	Form,
	FormGroup,
	ControlLabel,
	FormControl,
	ButtonToolbar,
	Button,
	Slider,
} from "rsuite";
import {
	useForm,
	Controller,
	RegisterOptions,
	UnpackNestedValue,
} from "react-hook-form";

import "./form.css";

interface IField {
	name: string;
	type: "text" | "password" | "email" | "slider";
	label?: string;
	default?: string;
	placeholder?: string;
	rules?: Exclude<
		RegisterOptions,
		"valueAsNumber" | "valueAsDate" | "setValueAs"
	>;
}

interface IProps<T> {
	fields: IField[];
	onSubmit: (data: UnpackNestedValue<T>) => void;
}

export default function <T>({ fields, onSubmit }: IProps<T>) {
	const {
		getValues,
		reset,
		register,
		handleSubmit,
		watch,
		errors,
		control,
		formState,
	} = useForm();

	return (
		<>
			<Form fluid>
				{fields.map((field) => (
					<FormGroup>
						<ControlLabel>{field.label}</ControlLabel>
						<Controller
							name={field.name}
							control={control}
							defaultValue={field.default}
							rules={field.rules}
							render={({ onChange, value }) => {
								switch (field.type) {
									case "slider":
										return (
											<Slider
												value={value}
												onChange={onChange}
												step={1024}
												graduated
												progress
												min={0}
												max={5120}
												renderMark={(mark) => (
													<span
														style={{ display: "block", textAlign: "center" }}
													>
														{mark}
														<br />
														kb/s
													</span>
												)}
											/>
										);

									default:
										return (
											<FormControl
												id={field.name}
												name={field.name}
												placeholder={field.placeholder}
												type={field.type}
												errorMessage={
													errors[field.name] ? errors[field.name].message : null
												}
												value={value}
												onChange={onChange}
											/>
										);
								}
							}}
						/>
					</FormGroup>
				))}
				<FormGroup>
					<ButtonToolbar>
						<Button
							disabled={Object.keys(errors).length > 0 || !formState.isDirty}
							appearance="primary"
							onClick={handleSubmit((data: UnpackNestedValue<T>) => {
								onSubmit(data);
								reset();
							})}
						>
							Submit
						</Button>
					</ButtonToolbar>
				</FormGroup>
			</Form>
		</>
	);
}
