const HtmlWebpackPlugin = require("html-webpack-plugin");
const MiniCssExtractPlugin = require("mini-css-extract-plugin");
const TerserPlugin = require("terser-webpack-plugin");

const path = require("path");
const output = path.resolve(__dirname, "dist");

module.exports = {
	mode: "production",
	entry: {
		reactvendors: { import: ["react", "react-dom"], runtime: "runtime" },
		app: {
			import: "./src/index.ts",
			dependOn: ["reactvendors"],
		},
	},
	externalsPresets: {
		node: true,
		nwjs: true,
	},
	optimization: {
		minimize: true,
		minimizer: [
			new TerserPlugin({
				parallel: true,
			}),
		],
	},
	module: {
		rules: [
			{
				test: /\.node$/,
				loader: "node-loader",
			},
			{
				test: /\.tsx?$/,
				loader: "ts-loader",
				exclude: /node_modules/,
				options: {
					onlyCompileBundledFiles: true,
				},
			},
			{
				test: /\.s?[ac]ss$/i,
				use: [
					{
						loader: MiniCssExtractPlugin.loader,
						options: {
							publicPath: "",
							/* publicPath: (resourcePath, context) => {
								//console.log(resourcePath, context);
								//return path.relative(path.join(context, output), path.dirname(resourcePath), context) + '/';;
								return "";
							}, */
						},
					},
					// Translates CSS into CommonJS
					"css-loader",
					// Compiles Sass to CSS
					"sass-loader",
				],
			},
			{
				test: /rsuite-dark\.min\.css$/,
				loader: "string-replace-loader",
				options: {
					search:
						"https://cdn.jsdelivr.net/npm/rsuite/dist/styles/fonts/rsuite-icon-font.ttf",
					replace: "../../../../assets/fonts/rsuite-icon-font.ttf",
				},
			},
			{
				test: /app\/index\.tsx$/,
				loader: "string-replace-loader",
				options: {
					search: "/dist/index.html",
					replace:
						process.env.NODE_ENV === "PROD"
							? "/index.html"
							: "/dist/index.html",
					flags: "g",
				},
			},
			{
				test: /\.(png|svg|jpg|jpeg|gif)$/i,
				type: "asset/resource",
				generator: {
					filename: "assets/images/[name][ext]",
				},
			},
			{
				test: /\.(woff|woff2|eot|ttf|otf)$/i,
				type: "asset/resource",
				generator: {
					filename: "assets/fonts/[name][ext]",
				},
			},
		],
	},
	resolve: {
		extensions: [".tsx", ".ts", ".js"],
		/* fallback: {
			path: false,
			util: false,
			assert: false,
			https: false,
			http: false,
			url: false,
			stream: false,
			crypto: false,
			buffer: false,
		}, */
		/* alias: {
			react: "preact/compat",
			"react-dom/test-utils": "preact/test-utils",
			"react-dom": "preact/compat",
			// Must be below test-utils
		}, */
	},
	output: {
		filename: "[name].[contenthash].js",
		path: output,
	},
	plugins: [
		new MiniCssExtractPlugin({
			// Options similar to the same options in webpackOptions.output
			// both options are optional
			filename: "[name].[contenthash].css",
			chunkFilename: "[id].[contenthash].css",
		}),
		new HtmlWebpackPlugin({
			template: "./src/template.html",
			inject: "body",
		}),
	],
};
